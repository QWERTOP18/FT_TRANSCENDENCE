name: Docker Compose CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  docker-compose-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and start services
      run: |
        echo "Building Docker images..."
        docker compose build
        
        echo "Starting services..."
        docker compose up -d
        
        echo "Waiting for services to be ready..."
        timeout 60 bash -c 'until curl -f -s http://localhost:3000 > /dev/null; do sleep 2; done'
        timeout 60 bash -c 'until curl -f -s http://localhost:4000/ping > /dev/null; do sleep 2; done'
        timeout 60 bash -c 'until curl -f -s http://localhost:8080 > /dev/null; do sleep 2; done'
        
        echo "=== Docker Compose Services ==="
        docker compose ps
    

    
    - name: Test service connectivity
      run: |
        echo "=== Service Connectivity Test ==="
        
        echo "Testing frontend service (http://localhost:3000)..."
        if curl -f -s -w "Status: %{http_code}, Time: %{time_total}s\n" http://localhost:3000; then
          echo "✅ Frontend service is responding correctly"
        else
          echo "❌ Frontend service is not responding"
          echo "Frontend logs:"
          docker compose logs --tail=10 frontend
          exit 1
        fi
        
        echo ""
        echo "Testing game service (http://localhost:4000/ping)..."
        if curl -f -s -w "Status: %{http_code}, Time: %{time_total}s\n" http://localhost:4000/ping; then
          echo "✅ Game service is responding correctly"
        else
          echo "❌ Game service is not responding"
          echo "Game logs:"
          docker compose logs --tail=10 game
          exit 1
        fi
        
        echo ""
        echo "Testing tournament service (http://localhost:8080)..."
        if curl -f -s -w "Status: %{http_code}, Time: %{time_total}s\n" http://localhost:8080; then
          echo "✅ Tournament service is responding correctly"
        else
          echo "❌ Tournament service is not responding"
          echo "Tournament logs:"
          docker compose logs --tail=10 tournament
          exit 1
        fi
        
        echo ""
        echo "=== Service Response Summary ==="
        echo "Frontend: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)"
        echo "Game: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/ping)"
        echo "Tournament: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080)"
    
    - name: Check service logs
      run: |
        echo "=== Frontend Logs ==="
        docker compose logs frontend
        
        echo "=== Game Logs ==="
        docker compose logs game
        
        echo "=== Tournament Logs ==="
        docker compose logs tournament
    
    - name: Cleanup
      if: always()
      run: |
        echo "Stopping services..."
        docker compose down -v
        
        echo "Cleaning up images..."
        docker image prune -f
